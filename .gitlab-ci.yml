stages:
  - build
  - test
  - publish
  - check_security
  - deployment

build:
  stage: build
  script:
    - if [ -z "${DRACS_GITLAB_KEY}" ]; then echo "DRACS_GITLAB_KEY ENVIRONMENT IS MISSING"; exit 1; fi
    - echo "${DRACS_GITLAB_KEY}" > .ssh/git_deploy_key
    - chmod 400 .ssh/config .ssh/git_deploy_key
    - ./bin/ci/build
  only:
    - branches
  tags:
    - docker-build

jest:
  stage: test
  image: ${CI_REGISTRY_IMAGE}/${CI_PROJECT_NAME}-candidate-${CI_COMMIT_SHA}:${CI_COMMIT_REF_SLUG}
  # by default, gitlab ci clones your code out into a build directory
  # that needs to then be initialized with npm.
  # Since we are testing a candidate image that already has the required modules
  # installed with npm install, we do not need to clone into the build directory.
  # Instead, we need to change into the WORKDIR for the image before we run the
  # tests, and then copy any artifacts back to the original CI_PROJECT_DIR
  variables:
    GIT_STRATEGY: none
  script:
    - cd /opt/app-root/src
    - npm run ci_test
    - mv coverage ${CI_PROJECT_DIR}
  coverage: /All files[^|]*\|[^|]*\s+([\d\.]+)/
  only:
    - branches
  tags:
    - docker

security_audit:
  tags:
    - docker
  stage: test
  image: ${CI_REGISTRY_IMAGE}/${CI_PROJECT_NAME}-candidate-${CI_COMMIT_SHA}:${CI_COMMIT_REF_SLUG}
  variables:
    GIT_STRATEGY: none
  script:
    - cd ${APP_ROOT}
    - npm install npm@latest -g --prefix ${APP_ROOT}/.node_modules
    - ${APP_ROOT}/.node_modules/bin/npm i --package-lock-only
    - ${APP_ROOT}/.node_modules/bin/npm audit > audit_report.txt 2>&1
  # temporary until dracs is updated and we can upgrade react, etc
  # as audit can't ignore dev dependencies
  allow_failure: true
  artifacts:
    paths:
      - audit_report.txt
    expire_in: 1 week
  only:
    - master

# this runs on every branch except master
# it attempts to run npm audit fix on the repo,
# create a branch, and a merge request from the
# audit fix branch to the original branch
audit_fix:
  tags:
    - docker
  stage: test
  image: node:8
  variables:
    GIT_STRATEGY: clone
  script:
    - if [ -z "${DRACS_GITLAB_KEY}" ]; then echo "DRACS_GITLAB_KEY ENVIRONMENT IS MISSING"; exit 1; fi
    - cp -r .ssh ${HOME}/.ssh
    - echo "${DRACS_GITLAB_KEY}" > ${HOME}/.ssh/git_deploy_key
    - chmod 400 ${HOME}/.ssh/config ${HOME}/.ssh/git_deploy_key
    - ./bin/ci/audit_fix
  only:
    - branches
  except:
    - master
  artifacts:
    paths:
      - audit_report.txt
    expire_in: 1 week

# this only runs on master
# it automatically generates the next semantic verson and creates an annotated tag
increment_version:
  stage: publish
  image: ${CI_REGISTRY_IMAGE}/${CI_PROJECT_NAME}-candidate-${CI_COMMIT_SHA}:${CI_COMMIT_REF_SLUG}
  script:
    - /opt/app-root/src/bin/ci/auto_version
  only:
    - master
  tags:
    - docker

publish_development_image:
  stage: publish
  script:
    - ./bin/ci/build_deployment
  environment:
    name: development
  only:
    - /^v.*$/
  except:
    - branches
  tags:
    - docker-build

publish_uatest_image:
  stage: publish
  script:
    - ./bin/ci/build_deployment
  environment:
    name: uatest
  only:
    - /^uatest\-v.*$/
  except:
    - branches
  tags:
    - docker-build

scan_development_deployment_image:
  stage: check_security
  script:
    - ./bin/ci/scan
  environment:
    name: development
  only:
    - /^v.*$/
  except:
    - branches
  tags:
    - shell-executor
  artifacts:
    paths:
      - image_vulnerability_report.json
    expire_in: 1 week

scan_uatest_deployment_image:
  stage: check_security
  script:
    - ./bin/ci/scan
  environment:
    name: uatest
  only:
    - /^uatest\-v.*$/
  except:
    - branches
  tags:
    - shell-executor
  artifacts:
    paths:
      - image_vulnerability_report.json
    expire_in: 1 week

deploy_development:
  stage: deployment
  image: $CI_REGISTRY/utility/docker-helm:latest
  script:
    - ./bin/ci/deploy
  environment:
    name: development
  only:
    - /^v.*$/
  except:
    - branches
  tags:
    - docker

deploy_uatest:
  stage: deployment
  image: $CI_REGISTRY/utility/docker-helm:latest
  script:
    - ./bin/ci/deploy
  environment:
    name: uatest
  only:
    - /^uatest\-v.*$/
  except:
    - branches
  tags:
    - docker
