stages:
  - build
  - test
  - publish
  - check_security
  - deploy

build:
  stage: build
  script:
    - echo "${DRACS_GITLAB_KEY}" > .ssh/git_deploy_key
    - chmod 400 .ssh/config .ssh/git_deploy_key
    - ./bin/ci/build
  only:
    - branches
  tags:
    - docker-build

jest:
  stage: test
  image: ${CI_REGISTRY_IMAGE}/${CI_PROJECT_NAME}-candidate-${CI_COMMIT_SHA}:${CI_COMMIT_REF_SLUG}
  # by default, gitlab ci clones your code out into a build directory
  # that needs to then be initialized with npm.
  # Since we are testing a candidate image that already has the required modules
  # installed with npm install, we do not need to clone into the build directory.
  # Instead, we need to change into the WORKDIR for the image before we run the
  # tests, and then copy any artifacts back to the original CI_PROJECT_DIR
  variables:
    GIT_STRATEGY: none
  script:
    - cd /opt/app-root/src
    - npm run ci_test
    - mv coverage ${CI_PROJECT_DIR}
  coverage: /All files[^|]*\|[^|]*\s+([\d\.]+)/
  only:
    - branches
  tags:
    - docker

# this should be turned into a bot that fixes and creates a merge request or an issue
security_audit:
  tags:
    - docker
  stage: test
  image: ${CI_REGISTRY_IMAGE}/${CI_PROJECT_NAME}-candidate-${CI_COMMIT_SHA}:${CI_COMMIT_REF_SLUG}
  variables:
    GIT_STRATEGY: none
  script:
    - cd ${APP_ROOT}
    - npm install npm@latest -g --prefix ${APP_ROOT}/.node_modules
    - ${APP_ROOT}/.node_modules/bin/npm i --package-lock-only
    - ${APP_ROOT}/.node_modules/bin/npm audit
  # temporary until dracs is updated and we can upgrade react, etc
  # as audit can't ignore dev dependencies
  allow_failure: true
  only:
    - master

publish_development_image:
  stage: publish
  script:
    - ./bin/ci/build_deployment
  environment:
    name: development
  only:
    - master
  tags:
    - docker-build

scan_development_deployment_image:
  stage: check_security
  script:
    - ./bin/ci/scan
  environment:
    name: development
  only:
    - master
  tags:
    - docker-build

deploy_development:
  stage: deploy
  script:
    - ./bin/ci/helm_deploy
  environment:
    name: development
  only:
    - master
  tags:
    - docker
