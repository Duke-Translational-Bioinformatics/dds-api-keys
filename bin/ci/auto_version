#!/bin/sh
# this script will automatically create an annotated tag on the project
# with an increment of a semantic version.
# It supports multiple levels of semantic version increment, which
# can be determined with a line in the git commit with the following
# format
# SEMVER_VERSION_LEVEL:${level}
# where level can be one of the levels supported by semver
# https://www.npmjs.com/package/semver
# If this line does not exist in the commit, a patch increment will be applied
raise()
{
  echo "${1}" >&2
}

check_required_environment() {
  if [ -z "${CI_COMMIT_MESSAGE}" ]
  then
    raise "MISSING CI_COMMIT_MESSAGE ENVIRONMENT VARIABLE"
    return 1
  fi

  if [ -z "${CI_PROJECT_NAME}" ]
  then
    raise "MISSING CI_PROJECT_NAME ENVIRONMENT VARIABLE"
    return 1
  fi

  if [ -z "${BOT_KEY}" ]
  then
    raise "MISSING BOT_KEY ENVIRONMENT VARIABLE"
    return 1
  fi

  if [ -z "${CI_COMMIT_SHA}" ]
  then
    raise "MISSING CI_COMMIT_SHA ENVIRONMENT VARIABLE"
    return 1
  fi

  if [ -z "${CI_API_V4_URL}" ]
  then
    raise "MISSING CI_API_V4_URL ENVIRONMENT VARIABLE"
    return 1
  fi

  if [ -z "${CI_PROJECT_ID}" ]
  then
    raise "MISSING CI_PROJECT_ID ENVIRONMENT VARIABLE"
    return 1
  fi
}

get_latest_version() {
  local latest_version=$(git for-each-ref --sort=taggerdate --format '%(tag)' refs/tags | grep '^v' | tail -1)
  if [ -z "${latest_version}" ]
  then
    # initialize the first version tag for the project if no previous tags exist
    latest_version='v0.0.0'
  fi
  echo "${latest_version}"
}

increment() {
  local current_version="${1}"
  version_level=$(echo "${CI_COMMIT_MESSAGE}" | grep '^SEMVER_VERSION_LEVEL\:' | cut -d':' -f2)
  new_version=$(${APP_ROOT}/node_modules/.bin/semver -i ${version_level} ${current_version})
  if [ $? -gt 0 ]
  then
    raise "problem running semver"
    return 1
  fi
  echo "${new_version}"
}

tag_version() {
  local new_version="${1}"
  raise "Tagging ${CI_PROJECT_NAME} at ${CI_API_V4_URL} with ${new_version}"
  curl -X POST --header "Content-Type: application/json" --header "Accept: application/json" \
    -H "Private-Token: ${BOT_KEY}" \
    -d "{\"tag_name\":\"${new_version}\",\"ref\":\"${CI_COMMIT_SHA}\",\"message\":\"${new_version} generated by semver bot\"}" \
    "${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/repository/tags"
}

run_main() {
  check_required_environment || return 1
  local latest_version=$(get_latest_version)
  local this_version=$(increment "${latest_version}")
  if [ $? -gt 0 ]
  then
    return 1
  fi
  # semver strips the initial 'v'
  tag_version "v${this_version}"
}

# DO NOT CHANGE THE NAME OF THIS SCRIPT OR ITS DIRECTORY!
raise "${0} running"
echo "${0}" | grep 'bin/ci/auto_version' > /dev/null 2>&1
if [ $? -eq 0 ]
then
  run_main
fi
