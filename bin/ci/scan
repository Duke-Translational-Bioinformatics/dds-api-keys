#!/bin/bash
# This script scans the deployment image. It must be
# run within a gitlab ci environment.
raise()
{
  echo "${1}" >&2
}

check_required_environment() {
  local required_env="CI_COMMIT_REF_SLUG CI_PROJECT_NAME CI_REGISTRY_USER CI_REGISTRY_PASSWORD CI_REGISTRY_IMAGE"

  for reqvar in $required_env
  do
    if [ -z ${!reqvar} ]
    then
      raise "missing ENVIRONMENT ${reqvar}!"
      return 1
    fi
  done
}

dry_run() {
  [ ${DRY_RUN} ] && raise "skipping for dry run" && return
  return 1
}

scan_image() {
  local application="${1}"
  local deployable_image="${CI_REGISTRY_IMAGE}/${application}:${CI_COMMIT_REF_SLUG}"

  local twistlock="https://app-image-scan.cats.dhe.duke.edu/v2/image"
  if [ ${TWISTLOCK_ADDR} ]
  then
    twistlock="${TWISTLOCK_ADDR}"
  fi

  raise "Scanning ${deployable_image} with ${twistlock}"

  if ! dry_run
  then
    curl -X POST ${twistlock}
          -H "Content-Type: application/json"
          -H "registry_password: ${CI_REGISTRY_PASSWORD}"
          -H "registry_user: ${CI_REGISTRY_USER}"
          -H "image: ${deployable_image}"
          -d "{}" > image_vulnerability_report.json
    cat image_vulnerability_report.json
    cat image.vulns.pre | grep 'FailVulnerabilities\"\:false' > /dev/null 2>&1
    if [ $? -gt 0 ]
    then
      return 1
    fi
    return
  fi
}

run_main() {
  check_required_environment || exit 1

  scan_image "${CI_PROJECT_NAME}" || return 1
  raise "ALL COMPLETE"
}

if [[ "${BASH_SOURCE[0]}" == "${0}" ]]
then
  run_main
  exit $?
fi
