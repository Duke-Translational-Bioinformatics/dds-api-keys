#!/bin/bash
# This script scans the deployment image. It must be
# run within a gitlab ci environment.
raise()
{
  echo "${1}" >&2
}

check_required_environment() {
  local required_env="CI_COMMIT_REF_SLUG CI_PROJECT_NAME CI_PROJECT_DIR CI_REGISTRY CI_REGISTRY_USER CI_REGISTRY_PASSWORD CI_REGISTRY_IMAGE CI_ENVIRONMENT_NAME"

  for reqvar in $required_env
  do
    if [ -z ${!reqvar} ]
    then
      raise "missing ENVIRONMENT ${reqvar}!"
      return 1
    fi
  done

  if [ ! -f "${CI_PROJECT_DIR}/claire.whitelist.yml" ]
  then
    raise "missing whitelist file ${CI_PROJECT_DIR}/claire.whitelist.yml"
    return 1
  fi
}

login() {
  echo "
  logging into ${CI_REGISTRY}
  "
  dry_run && return
  docker login -u ${CI_REGISTRY_USER} -p ${CI_REGISTRY_PASSWORD} ${CI_REGISTRY}
}

dry_run() {
  [ ${DRY_RUN} ] && raise "skipping for dry run" && return
  return 1
}

scan_image() {
  local application="${1}"
  local deployable_image="${CI_REGISTRY_IMAGE}/${application}:${CI_COMMIT_REF_SLUG}"

  local claire_image="${CI_REGISTRY}/cats/klar-cmd:latest"
  if [ ${CLAIRE_IMAGE} ]
  then
    claire_image="${CLAIRE_IMAGE}"
  fi

  local claire_address="https://api-route-clair-scanner.cats.dhe.duke.edu:443"
  if [ ${CLAIRE_ADDR} ]
  then
    claire_address="${CLAIRE_ADDR}"
  fi

  raise "Scanning ${deployable_image} with ${claire_address} ${claire_image}"
  raise "using whitelist at ${CI_PROJECT_DIR}/claire.whitelist.yml"

  if ! dry_run
  then
    docker run --rm \
    -e DOCKER_USER=${CI_REGISTRY_USER} \
    -e DOCKER_PASSWORD="${CI_REGISTRY_PASSWORD}" \
    -e CLAIR_ADDR=${claire_address} \
    -e CLAIR_OUTPUT=High \
    -e CLAIR_THRESHOLD=0 \
    -e WHITELIST_FILE=/data/claire.whitelist.yml \
    -v ${CI_PROJECT_DIR}/claire.whitelist.yml:/data/claire.whitelist.yml \
    ${claire_image} ${deployable_image}
  fi
}

run_main() {
  check_required_environment || exit 1

  login || exit 1
  scan_image "${CI_PROJECT_NAME}" || return 1
  raise "ALL COMPLETE"
}

if [[ "${BASH_SOURCE[0]}" == "${0}" ]]
then
  run_main
  exit $?
fi
