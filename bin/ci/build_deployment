#!/bin/bash
# This script builds the ${application}:${commit}
# production ready image from the image built from build.nodejs,
# which is pruned of all devDependencies, and only includes the
# express application, dist, and node_modules.
# It only runs in deployable environments.
raise()
{
  echo "${1}" >&2
}

check_required_environment() {
  local required_env="CI_COMMIT_REF_SLUG CI_PROJECT_NAME CI_PROJECT_DIR CI_COMMIT_SHA CI_ENVIRONMENT_NAME"

  for reqvar in $required_env
  do
    if [ -z ${!reqvar} ]
    then
      raise "missing ENVIRONMENT ${reqvar}!"
      return 1
    fi
  done
}

check_required_deployment_environment() {
  local required_deploymet_env="OAUTH_CLIENT_ID OAUTH_REDIRECT DDS_API_BASE_URL"

  for reqvar in $required_deploymet_env
  do
    if [ -z ${!reqvar} ]
    then
      raise "missing ENVIRONMENT required for deployment ${reqvar}!"
      return 1
    fi
  done
}

check_required_publish_environment() {
  [ ${DO_NOT_PUBLISH} ] && return
  local required_publish_env="CI_REGISTRY CI_REGISTRY_USER CI_REGISTRY_PASSWORD CI_REGISTRY_IMAGE"

  for reqvar in $required_publish_env
  do
    if [ -z ${!reqvar} ]
    then
      raise "missing ENVIRONMENT ${reqvar} REQUIRED TO PUBLISH!
      SET DO_NOT_PUBLISH=1 TO SKIP PUBLISHING TO THE GITLAB REGISTRY
      "
      return 1
    fi
  done
}

login() {
  [ ${DO_NOT_PUBLISH} ] && return

  check_required_publish_environment || return 1
  echo "
  logging into ${CI_REGISTRY}
  "
  dry_run && return
  docker login -u ${CI_REGISTRY_USER} -p ${CI_REGISTRY_PASSWORD} ${CI_REGISTRY}
}

deployable() {
  local target_environment="${1}"
  echo "${target_environment}" | grep 'development' > /dev/null
}

dry_run() {
  [ ${DRY_RUN} ] && raise "skipping for dry run" && return
  return 1
}

cleanup_artifacts() {
  local intermediate_image="${1}"
  local extract_name="${2}"
  docker stop ${extract_name}
  docker rm -v ${extract_name}
  docker rmi ${intermediate_image}
}

build_intermediate_image() {
  local original_base_image="${1}"
  local candidate_image="${2}"
  local intermediate_image="${3}"

  # programmatically override the FROM
  sed "s|FROM ${original_base_image}|FROM ${candidate_image}|" ${CI_PROJECT_DIR}/Dockerfile.production.intermediate | docker build --build-arg CI_COMMIT_SHA --build-arg OAUTH_CLIENT_ID --build-arg OAUTH_REDIRECT --build-arg DDS_API_BASE_URL -t "${intermediate_image}" -
  if [ $? -gt 0 ]
  then
    raise "Problem in the Build"
    return 1
  fi
}

build_deployable_image() {
  local intermediate_image="${1}"
  local extract_name="${2}"
  local deployable_image="${3}"

  docker container create --name ${extract_name} ${intermediate_image}
  if [ $? -gt 0 ]
  then
    raise "Problem in the Build"
    return 1
  fi

  docker container cp ${extract_name}:/opt/app-root/src .
  if [ $? -gt 0 ]
  then
    cleanup_artifacts "${intermediate_image}" "${extract_name}"
    raise "Problem in the Build"
    return 1
  fi

  cp ${CI_PROJECT_DIR}/Dockerfile.production src/Dockerfile
  cd src
  docker build --build-arg CI_COMMIT_SHA -t ${deployable_image} .
  build_exit=$?

  cd ..
  rm -rf src
  cleanup_artifacts "${intermediate_image}" "${extract_name}"
  if [ $build_exit -gt 0 ]
  then
    raise "Problem in the Build"
    return 1
  fi
  return
}

build_deployable() {
  local application="${1}"
  local image_tag="${2}"

  local original_base_image="${application}"
  # the candidate image is always built in the master branch
  local candidate_image="${application}-candidate-${CI_COMMIT_SHA}:master"
  local intermediate_image="${application}-intermediate:${image_tag}"
  local extract_name="${application}-${image_tag}-extract"

  if [ ${CI_REGISTRY_IMAGE} ]
  then
    candidate_image="${CI_REGISTRY_IMAGE}/${application}-candidate-${CI_COMMIT_SHA}:master"
  fi
  local deployable_image="${application}:${image_tag}"
  raise "
  Building ${original_base_image} deployable ${deployable_image} FROM ${candidate_image}
  "
  if ! dry_run
  then
    cleanup_artifacts "${intermediate_image}" "${extract_name}"
    build_intermediate_image "${original_base_image}" "${candidate_image}" "${intermediate_image}" || return 1
    build_deployable_image "${intermediate_image}" "${extract_name}" "${deployable_image}" || return 1
  fi
  publish_image "${deployable_image}"
}

publish_image() {
  [ ${DO_NOT_PUBLISH} ] && return
  local image="${1}"
  local publishable_image="${CI_REGISTRY_IMAGE}/${image}"
  raise "
  tagging ${image} as ${publishable_image}
  "
  if ! dry_run
  then
    docker tag "${image}" "${publishable_image}"
    if [ $? -gt 0 ]
    then
      raise "Problem Tagging"
      return 1
    fi
  fi
  raise "
  pushing image to gitlab registry
  "
  dry_run && return
  docker push "${publishable_image}"
}

run_main() {
  check_required_environment || exit 1

  if deployable "${CI_ENVIRONMENT_NAME}"
  then
    check_required_deployment_environment || exit 1
  else
    raise "build_deployment skipping non deployable environment ${CI_ENVIRONMENT_NAME}"
    exit
  fi
  login || exit 1

  build_deployable "${CI_PROJECT_NAME}" "${CI_COMMIT_REF_SLUG}" || return 1
  raise "ALL COMPLETE"
}

if [[ "${BASH_SOURCE[0]}" == "${0}" ]]
then
  run_main
  exit $?
fi
